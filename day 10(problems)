Question 1 -------> T = O(n) S = O(n)

class Solution {
    public int[] rearrangeArray(int[] nums) {
        int k = 0, j = 1;
        int[] _nums = new int[nums.length];
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] > 0)
            {
                _nums[k] = nums[i];
                k = k+2;
            }
            else
            {
                _nums[j] = nums[i];
                j = j+2;
            }
        }  
        return _nums;
    }
}

Question 2 ----------> T = O(N^2) S = O(1)

class Solution {
    public static void reverseArray(int[] arr)
    {
        int temp;
        for(int i = 0; i < arr.length/2; i++)
        {
            temp = arr[i];
            arr[i] = arr[arr.length-i-1];
            arr[arr.length-i-1] = temp;
        }
    }
    public static void sort(int[] arr, int idx)
    {
        int k,temp;
        for(int i = idx+1; i < arr.length; i++)
        {
            k = i-1;
            while(k >= idx)
            {
                if(arr[i] > arr[k])
                    break;
                k--;
            }
            temp = arr[i];
            for(int j = i-1; j >= k+1; j--)
            {
                arr[j+1] = arr[j];
            }
            arr[k+1] = temp;
        }
    }
    public void nextPermutation(int[] nums) {
        int j = nums.length-2;
        int mini = -1, min;
        int temp;
        while(j >= 0)
        {
            if(nums[j] < nums[j+1])
                break;
            j--;
        }
        if(j == -1)
        {
            reverseArray(nums);
        }
        else
        {
            min = Integer.MAX_VALUE;
            for(int i = nums.length-1; i >= j+1; i--)
            {
                if(nums[i] > nums[j])
                {
                    if(nums[i]< min)
                    {
                        min = nums[i];
                        mini = i;
                    }
                }
            }
            temp = nums[j];
            nums[j] = nums[mini];
            nums[mini] = temp;

            sort(nums, j+1);
        }
    }
}

Question 3 ----------> T = O(n) S = O(1)

class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        int buy = prices[0];
        for(int i = 1; i < prices.length; i++)
        {
            if(prices[i] < buy)
                buy = prices[i];
            else if(prices[i]-buy > profit)
                profit = prices[i]-buy;
        }
        return profit;
    }
}
