Question 1 --------> T = O(n^2) S = O(1)

class Solution {
    public static int search(int[] nums,int start,int key)
    {
        int idx = -1;
        for(int i = start; i < nums.length; i++)
        {
            if (nums[i] == key)
            {
                idx = i;
                break;
            }
        }
        return idx;
    }
    public int[] twoSum(int[] nums, int target) {
        int index;
        int[] res = new int[2];
        for(int i = 0; i < nums.length-1; i++)
        {
            index = search(nums,i+1,(target-nums[i]));
            if(index > 0)
            {
                res[0] = i;
                res[1] = index;
                break;
            }
            else
            {
                res[0] = -1;
                res[1] = -1;
            }
        }
        return res;
    }
}

Question 2 -------> T = O(n) S = O(1)

class Solution {
    public void sortColors(int[] nums) {
        int count0 = 0;
        int count1 = 0;
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == 0)
                count0++;
            else if(nums[i] == 1)
                count1++;
        }
        for(int j = 0; j < nums.length; j++)
        {
            if(j >= 0 && j < count0)
                nums[j] = 0;
            else if(j >= count0 && j < count0+count1)
                nums[j] = 1;
            else
                nums[j] = 2;
        }
    }
}

Question 3 ---------> T = O(n) S = O(1)

class Solution {
    // Function to find pair with maximum sum
    public int pairWithMaxSum(int arr[]) {
        int sum = 0;
        int max = -1;
        for(int i = 0; i < arr.length-1; i++)
        {
            sum = arr[i]+ arr[i+1];
            max = (sum > max)?sum:max;
        }
        return max;
    }
}
