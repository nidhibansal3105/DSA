Question 1 -------------> T = O(n) S = O(1)

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        for(int i = 0; i < flowerbed.length; i++)
        {
            if(flowerbed.length >= 2)
            {
                if(flowerbed[i] == 0 && (i == 0 || flowerbed[i-1] == 0) && (i == flowerbed.length-1 || flowerbed[i+1] == 0))
                {   
                    flowerbed[i] = 1;
                    count++;
                    continue;
                }
            }
            else
            {
                if(flowerbed[i] == 0)
                    count++;
            }
        }
        if(count >= n)
            return true;
        else
            return false;
    }
}

Question 2 ------------> T= O(n^3) S = O(1)

class Solution {
    public int minimumSumSubarray(List<Integer> nums, int l, int r) {
        int minSum = -1,k, min = Integer.MAX_VALUE;
        for(int i = l; i <= r; i++)
        {
            k = 0;
            while(k+i-1 < nums.size())
            {
                minSum = 0;
                for(int j = 0; j < i; j++)
                {
                    minSum += nums.get(k+j);
                }
                if(minSum > 0)
                {
                    min = (minSum < min) ? minSum:min;
                }  
                k++;
            }
        }
        return (min != Integer.MAX_VALUE) ? min : -1;
    }
}
