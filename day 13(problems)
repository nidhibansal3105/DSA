Question 1 ----------> T = O(logn) S = O(1)

import java.util.* ;
import java.io.*; 

public class Solution {
    public static int[] getFloorAndCeil(int[] a, int n, int x) {
      int low = 0;
      int high = n-1;
      int mid;
      int[] res = new int[2];
      while(low <= high)
      {
        mid = (low+high)/2;
        if(a[mid] <= x)
          low = mid+1;
        else
          high = mid-1;
      }
      if(high == -1)
      {
        res[0] = high;
        res[1] = a[low];
      }
      else if(a[high] == x)
        res[0] = res[1] = a[high];
      else if(low == n)
      {
        res[0] = a[high];
        res[1] = -1;
      }
      else
      {
        res[0] = a[high]; 
        res[1] = a[low];
      }
      return res;
    }
    
}

Question 2 -----------> T = O(logn) S = O(1)

class Solution {
    public int findMin(int[] nums) {
        if(nums.length == 1)
            return nums[0];
        else
        {
            int low = 0;
            int mid;
            int ans = Integer.MAX_VALUE;
            int high = nums.length-1;
            while(low <= high)
            {
                mid = (low+high)/2;
                if(nums[low] <= nums[mid])
                {
                    ans = (nums[low] > ans)?ans:nums[low];
                    low = mid+1;
                }
                else
                {
                    ans = (nums[mid] > ans)?ans:nums[mid];
                    high = mid-1;
                }
            }
            return ans;
        }
    }
}

Question 3 -----------> T = O(logn) S = O(1)

class Solution {
    public int search(int[] nums, int target) {
        int low = 0; 
        int high = nums.length-1;
        int mid;
        while(low <= high)
        {
            mid = (low+high)/2;
            if(nums[mid] == target)
                return mid;
            else if(nums[low] <= nums[mid]) //right half sorted
            {
                if(nums[mid] > target && nums[low] <= target)
                    high = mid-1;
                else
                    low = mid+1;
            }
            else
            {
                if(nums[mid] < target && nums[high] >= target)
                    low = mid+1;
                else
                    high = mid-1;
            }
        }
        return -1;
    }
}
