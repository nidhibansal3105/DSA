Question 1 -------> T = O(logn) S = O(1)

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int mid;
        int high = nums.length-1;
        while(low <= high)
        {
            mid = low + ((high-low)/2);
            if(nums[mid] == target)
            {
                return mid;
            }
            else if(nums[mid] < target)
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        return -1;
    }
}

Question 2 -------> T = O(logn) S = O(1)

class Solution {
    public static int firstInd(int[] nums, int target)
    {
        int low = 0;
        int mid;
        int ans = -1;
        int high = nums.length-1;
        while(low <= high)
        {
            mid = low + ((high-low)/2);
            if(nums[mid] < target)
            {
                low = mid+1;
            }
            else if(nums[mid] == target)
            {
                ans = mid;
                high = mid-1;
            }
            else
            {
                high = mid-1;
            }
        }
        return ans;
    }
    public static int lastInd(int[] nums, int target)
    {
        int low = 0;
        int mid;
        int ans = -1;
        int high = nums.length-1;
        while(low <= high)
        {
            mid = low + ((high-low)/2);
            if(nums[mid] < target)
            {
                low = mid+1;
            }
            else if(nums[mid] == target)
            {
                ans = mid;
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        int first = firstInd(nums,target);
        int last = lastInd(nums,target);
        int[] res = {first, last};
        return res;
    }
}

Question 3 ---------> T = O(logn) S = O(1)

class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        int ans = high+1;
        int mid;
        while (low <= high)
        {
            mid = (high+low)/2;
            if(nums[mid] >= target)
            {
                ans = mid;
                high = mid-1;
            }
            else
            {
                low = mid+1;
            }
        }
        return ans;
    }
}   
